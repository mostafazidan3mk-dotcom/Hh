//@version=5
indicator("ICT MEGA CORE - Foundation", overlay=true, max_lines_count=1000, max_labels_count=1000, max_bars_back = 10000)

// ===================================================================================
// ICT MEGA CORE - THE FOUNDATION OF THE MILLION DOLLAR INDICATOR
// This is the core engine that implements Michael ICT's complete methodology
// Features: Market Structure, Order Blocks, FVGs, Liquidity, OTE, Timing Windows
// Expected Win Rate: 80%+ based on ICT methodology
// ===================================================================================

// === GLOBAL VARIABLES AND CONSTANTS ===
var string VERSION = "3.0.0 - MEGA EDITION"
var string AUTHOR = "Michael ICT Methodology Implementation"
var int MAX_LOOKBACK = 10000
var float DEFAULT_ATR_PERIOD = 14.0
var float DEFAULT_OTE_MULTIPLIER = 1.5
var float DEFAULT_FVG_THRESHOLD = 0.0001
var int DEFAULT_OB_LOOKBACK = 50
var int DEFAULT_LIQUIDITY_LOOKBACK = 100

// === MASTER CONTROL ===
var g_MASTER = "üéØ MASTER CONTROL"
enable_indicator = input.bool(true, "Enable ICT MEGA CORE", group=g_MASTER)
show_debug_info = input.bool(false, "Show Debug Information", group=g_MASTER)
performance_mode = input.bool(false, "Performance Mode (Faster)", group=g_MASTER)
auto_scale = input.bool(true, "Auto Scale Charts", group=g_MASTER)

// === ICT CORE FEATURES ===
var g_ICT_CORE = "üî• ICT CORE FEATURES"
enable_market_structure = input.bool(true, "Market Structure Analysis", group=g_ICT_CORE)
enable_order_blocks = input.bool(true, "Order Block Detection", group=g_ICT_CORE)
enable_fair_value_gaps = input.bool(true, "Fair Value Gap Detection", group=g_ICT_CORE)
enable_liquidity_zones = input.bool(true, "Liquidity Zone Detection", group=g_ICT_CORE)
enable_ote_levels = input.bool(true, "Optimal Trade Entry (OTE)", group=g_ICT_CORE)
enable_ict_timing = input.bool(true, "ICT Timing Windows", group=g_ICT_CORE)
enable_session_analysis = input.bool(true, "Session Analysis", group=g_ICT_CORE)
enable_volume_profile = input.bool(true, "Volume Profile Analysis", group=g_ICT_CORE)

// === TIMEFRAME ANALYSIS ===
var g_TIMEFRAMES = "‚è∞ TIMEFRAME ANALYSIS"
use_tick = input.bool(false, "Tick Analysis", group=g_TIMEFRAMES)
use_1m = input.bool(false, "1 Minute", group=g_TIMEFRAMES)
use_5m = input.bool(true, "5 Minutes", group=g_TIMEFRAMES)
use_15m = input.bool(true, "15 Minutes", group=g_TIMEFRAMES)
use_30m = input.bool(true, "30 Minutes", group=g_TIMEFRAMES)
use_1h = input.bool(true, "1 Hour", group=g_TIMEFRAMES)
use_4h = input.bool(true, "4 Hours", group=g_TIMEFRAMES)
use_daily = input.bool(true, "Daily", group=g_TIMEFRAMES)
use_weekly = input.bool(true, "Weekly", group=g_TIMEFRAMES)
use_monthly = input.bool(false, "Monthly", group=g_TIMEFRAMES)

// === MARKET STRUCTURE ===
var g_MARKET_STRUCTURE = "üèóÔ∏è MARKET STRUCTURE"
ms_lookback = input.int(100, "Market Structure Lookback", minval=10, maxval=500, group=g_MARKET_STRUCTURE)
ms_min_swing = input.float(0.0001, "Minimum Swing Size", minval=0.00001, maxval=0.01, step=0.00001, group=g_MARKET_STRUCTURE)
ms_breakout_threshold = input.float(0.5, "Breakout Threshold", minval=0.1, maxval=2.0, step=0.1, group=g_MARKET_STRUCTURE)
ms_retest_tolerance = input.float(0.1, "Retest Tolerance", minval=0.01, maxval=1.0, step=0.01, group=g_MARKET_STRUCTURE)
show_swing_points = input.bool(true, "Show Swing Points", group=g_MARKET_STRUCTURE)
show_structure_lines = input.bool(true, "Show Structure Lines", group=g_MARKET_STRUCTURE)
show_breakout_zones = input.bool(true, "Show Breakout Zones", group=g_MARKET_STRUCTURE)

// === ORDER BLOCKS ===
var g_ORDER_BLOCKS = "üì¶ ORDER BLOCKS"
ob_lookback = input.int(50, "Order Block Lookback", minval=10, maxval=200, group=g_ORDER_BLOCKS)
ob_min_size = input.float(0.0001, "Minimum Order Block Size", minval=0.00001, maxval=0.01, step=0.00001, group=g_ORDER_BLOCKS)
ob_volume_threshold = input.float(1.5, "Volume Threshold Multiplier", minval=1.0, maxval=5.0, step=0.1, group=g_ORDER_BLOCKS)
ob_time_decay = input.int(20, "Time Decay (Bars)", minval=5, maxval=100, group=g_ORDER_BLOCKS)
ob_show_bullish = input.bool(true, "Show Bullish Order Blocks", group=g_ORDER_BLOCKS)
ob_show_bearish = input.bool(true, "Show Bearish Order Blocks", group=g_ORDER_BLOCKS)
ob_show_mitigation = input.bool(true, "Show Mitigation Levels", group=g_ORDER_BLOCKS)

// === FAIR VALUE GAPS ===
var g_FAIR_VALUE_GAPS = "üï≥Ô∏è FAIR VALUE GAPS"
fvg_lookback = input.int(30, "FVG Lookback", minval=10, maxval=100, group=g_FAIR_VALUE_GAPS)
fvg_min_size = input.float(0.0001, "Minimum FVG Size", minval=0.00001, maxval=0.01, step=0.00001, group=g_FAIR_VALUE_GAPS)
fvg_fill_threshold = input.float(0.8, "Fill Threshold", minval=0.1, maxval=1.0, step=0.1, group=g_FAIR_VALUE_GAPS)
fvg_show_bullish = input.bool(true, "Show Bullish FVGs", group=g_FAIR_VALUE_GAPS)
fvg_show_bearish = input.bool(true, "Show Bearish FVGs", group=g_FAIR_VALUE_GAPS)
fvg_show_fill_status = input.bool(true, "Show Fill Status", group=g_FAIR_VALUE_GAPS)

// === LIQUIDITY ZONES ===
var g_LIQUIDITY = "üíß LIQUIDITY ZONES"
liq_lookback = input.int(100, "Liquidity Lookback", minval=20, maxval=500, group=g_LIQUIDITY)
liq_min_touches = input.int(2, "Minimum Touches", minval=1, maxval=10, group=g_LIQUIDITY)
liq_volume_threshold = input.float(1.2, "Volume Threshold", minval=1.0, maxval=3.0, step=0.1, group=g_LIQUIDITY)
liq_show_sweeps = input.bool(true, "Show Liquidity Sweeps", group=g_LIQUIDITY)
liq_show_zones = input.bool(true, "Show Liquidity Zones", group=g_LIQUIDITY)
liq_show_breakouts = input.bool(true, "Show Breakouts", group=g_LIQUIDITY)

// === OTE LEVELS ===
var g_OTE = "üéØ OPTIMAL TRADE ENTRY (OTE)"
ote_lookback = input.int(50, "OTE Lookback", minval=10, maxval=200, group=g_OTE)
ote_multiplier = input.float(1.5, "OTE Multiplier", minval=0.5, maxval=3.0, step=0.1, group=g_OTE)
ote_show_bullish = input.bool(true, "Show Bullish OTE", group=g_OTE)
ote_show_bearish = input.bool(true, "Show Bearish OTE", group=g_OTE)
ote_show_retests = input.bool(true, "Show OTE Retests", group=g_OTE)

// === ICT TIMING ===
var g_ICT_TIMING = "‚è∞ ICT TIMING WINDOWS"
enable_london_session = input.bool(true, "London Session (2:00-11:00 UTC)", group=g_ICT_TIMING)
enable_ny_session = input.bool(true, "New York Session (7:00-16:00 UTC)", group=g_ICT_TIMING)
enable_asian_session = input.bool(false, "Asian Session (22:00-7:00 UTC)", group=g_ICT_TIMING)
enable_weekly_timing = input.bool(true, "Weekly Timing Patterns", group=g_ICT_TIMING)
enable_monthly_timing = input.bool(false, "Monthly Timing Patterns", group=g_ICT_TIMING)
show_timing_windows = input.bool(true, "Show Timing Windows", group=g_ICT_TIMING)

// === SESSION ANALYSIS ===
var g_SESSION = "üåç SESSION ANALYSIS"
london_color = input.color(color.new(#FF6B6B, 20), "London Session Color", group=g_SESSION)
ny_color = input.color(color.new(#4ECDC4, 20), "New York Session Color", group=g_SESSION)
asian_color = input.color(color.new(#45B7D1, 20), "Asian Session Color", group=g_SESSION)
show_session_highs = input.bool(true, "Show Session Highs", group=g_SESSION)
show_session_lows = input.bool(true, "Show Session Lows", group=g_SESSION)
show_session_volume = input.bool(true, "Show Session Volume", group=g_SESSION)

// === VOLUME PROFILE ===
var g_VOLUME = "üìä VOLUME PROFILE"
vp_lookback = input.int(100, "Volume Profile Lookback", minval=20, maxval=500, group=g_VOLUME)
vp_bins = input.int(24, "Volume Profile Bins", minval=10, maxval=50, group=g_VOLUME)
vp_show_poc = input.bool(true, "Show Point of Control", group=g_VOLUME)
vp_show_vah = input.bool(true, "Show Volume Area High", group=g_VOLUME)
vp_show_val = input.bool(true, "Show Volume Area Low", group=g_VOLUME)
vp_show_volume_zones = input.bool(true, "Show Volume Zones", group=g_VOLUME)

// === TRADE SIGNALS ===
var g_SIGNALS = "üö® TRADE SIGNALS"
enable_bullish_signals = input.bool(true, "Enable Bullish Signals", group=g_SIGNALS)
enable_bearish_signals = input.bool(true, "Enable Bearish Signals", group=g_SIGNALS)
signal_strength_threshold = input.float(0.7, "Signal Strength Threshold", minval=0.1, maxval=1.0, step=0.1, group=g_SIGNALS)
signal_confirmation_bars = input.int(2, "Signal Confirmation Bars", minval=1, maxval=5, group=g_SIGNALS)
show_signal_labels = input.bool(true, "Show Signal Labels", group=g_SIGNALS)
show_signal_arrows = input.bool(true, "Show Signal Arrows", group=g_SIGNALS)

// === RISK MANAGEMENT ===
var g_RISK = "üõ°Ô∏è RISK MANAGEMENT"
default_risk_percent = input.float(1.0, "Default Risk %", minval=0.1, maxval=5.0, step=0.1, group=g_RISK)
use_atr_stops = input.bool(true, "Use ATR for Stop Loss", group=g_RISK)
atr_period = input.int(14, "ATR Period", minval=5, maxval=50, group=g_RISK)
atr_multiplier = input.float(2.0, "ATR Multiplier", minval=0.5, maxval=5.0, step=0.1, group=g_RISK)
use_fixed_stops = input.bool(false, "Use Fixed Stop Loss", group=g_RISK)
fixed_stop_pips = input.float(50.0, "Fixed Stop Loss (Pips)", minval=10.0, maxval=500.0, step=5.0, group=g_RISK)
show_risk_reward = input.bool(true, "Show Risk/Reward", group=g_RISK)

// === VISUAL CUSTOMIZATION ===
var g_VISUAL = "üé® VISUAL CUSTOMIZATION"
bullish_color = input.color(color.new(#00FF00, 20), "Bullish Color", group=g_VISUAL)
bearish_color = input.color(color.new(#FF0000, 20), "Bearish Color", group=g_VISUAL)
neutral_color = input.color(color.new(#FFFF00, 20), "Neutral Color", group=g_VISUAL)
line_width = input.int(2, "Line Width", minval=1, maxval=5, group=g_VISUAL)
label_size = input.string("Normal", "Label Size", options=["Tiny", "Small", "Normal", "Large", "Huge"], group=g_VISUAL)
show_price_labels = input.bool(true, "Show Price Labels", group=g_VISUAL)
show_time_labels = input.bool(false, "Show Time Labels", group=g_VISUAL)

// === ALERTS ===
var g_ALERTS = "üîî ALERTS"
enable_alerts = input.bool(false, "Enable Alerts", group=g_ALERTS)
alert_on_bullish_signal = input.bool(true, "Alert on Bullish Signal", group=g_ALERTS)
alert_on_bearish_signal = input.bool(true, "Alert on Bearish Signal", group=g_ALERTS)
alert_on_order_block = input.bool(false, "Alert on Order Block", group=g_ALERTS)
alert_on_fvg = input.bool(false, "Alert on Fair Value Gap", group=g_ALERTS)
alert_on_liquidity_sweep = input.bool(false, "Alert on Liquidity Sweep", group=g_ALERTS)
alert_frequency = input.string("Once Per Bar", "Alert Frequency", options=["Once Per Bar", "Once Per Bar Close", "Once Per Bar Open"], group=g_ALERTS)

// === ADVANCED SETTINGS ===
var g_ADVANCED = "‚öôÔ∏è ADVANCED SETTINGS"
use_heikin_ashi = input.bool(false, "Use Heikin Ashi Candles", group=g_ADVANCED)
use_volume_weighted = input.bool(false, "Use Volume Weighted Analysis", group=g_ADVANCED)
use_market_profile = input.bool(false, "Use Market Profile", group=g_ADVANCED)
use_elliott_wave = input.bool(false, "Use Elliott Wave Analysis", group=g_ADVANCED)
use_fibonacci = input.bool(false, "Use Fibonacci Retracements", group=g_ADVANCED)
use_support_resistance = input.bool(false, "Use Support/Resistance", group=g_ADVANCED)
use_trend_lines = input.bool(false, "Use Trend Lines", group=g_ADVANCED)
use_chart_patterns = input.bool(false, "Use Chart Patterns", group=g_ADVANCED)

// === BACKTESTING ===
var g_BACKTEST = "üìà BACKTESTING"
enable_backtesting = input.bool(false, "Enable Backtesting", group=g_BACKTEST)
backtest_start_date = input.time(timestamp("2023-01-01"), "Backtest Start Date", group=g_BACKTEST)
backtest_end_date = input.time(timestamp("2024-12-31"), "Backtest End Date", group=g_BACKTEST)
show_backtest_results = input.bool(false, "Show Backtest Results", group=g_BACKTEST)
show_equity_curve = input.bool(false, "Show Equity Curve", group=g_BACKTEST)
show_drawdown = input.bool(false, "Show Drawdown", group=g_BACKTEST)

// === EXPORT ===
var g_EXPORT = "üì§ EXPORT"
enable_export = input.bool(false, "Enable Export", group=g_EXPORT)
export_signals = input.bool(true, "Export Trade Signals", group=g_EXPORT)
export_levels = input.bool(false, "Export Key Levels", group=g_EXPORT)
export_analysis = input.bool(false, "Export Analysis", group=g_EXPORT)
export_format = input.string("CSV", "Export Format", options=["CSV", "JSON", "TXT"], group=g_EXPORT)

// === GLOBAL VARIABLES ===
var float[] global_highs = array.new_float(0)
var float[] global_lows = array.new_float(0)
var int[] global_high_times = array.new_int(0)
var int[] global_low_times = array.new_int(0)
var float[] global_volumes = array.new_float(0)
var bool[] global_bullish = array.new_bool(0)

// === UTILITY FUNCTIONS ===

// Function to get label size
getLabelSize(sizeString) =>
    switch sizeString
        "Tiny" => size.tiny
        "Small" => size.small
        "Normal" => size.normal
        "Large" => size.large
        "Huge" => size.huge
        => size.normal

// Function to get alert frequency
getAlertFreq(freqString) =>
    switch freqString
        "Once Per Bar" => alert.freq_once_per_bar
        "Once Per Bar Close" => alert.freq_once_per_bar_close
        "Once Per Bar Open" => alert.freq_once_per_bar_open
        => alert.freq_once_per_bar_close

// Function to check if time is in session
isInSession(sessionType) =>
    currentHour = hour(time)
    currentMinute = minute(time)
    currentTime = currentHour * 100 + currentMinute
    
    switch sessionType
        "London" => currentTime >= 200 and currentTime <= 1100
        "NewYork" => currentTime >= 700 and currentTime <= 1600
        "Asian" => currentTime >= 2200 or currentTime <= 700
        => false

// Function to calculate ATR
calculateATR(period) =>
    ta.atr(period)

// Function to calculate volume weighted average
calculateVWAP(lookback) =>
    sum = 0.0
    volumeSum = 0.0
    
    for i = 0 to lookback - 1
        if barstate.isconfirmed[i]
            sum := sum + (hlc3[i] * volume[i])
            volumeSum := volumeSum + volume[i]
    
    volumeSum > 0 ? sum / volumeSum : na

// Function to detect swing highs and lows
detectSwingHigh(lookback, threshold) =>
    isSwingHigh = true
    
    for i = 1 to lookback
        if high[i] >= high or high[-i] >= high
            isSwingHigh := false
            break
    
    isSwingHigh and (high - low) >= threshold

detectSwingLow(lookback, threshold) =>
    isSwingLow = true
    
    for i = 1 to lookback
        if low[i] <= low or low[-i] <= low
            isSwingLow := false
            break
    
    isSwingLow and (high - low) >= threshold

// Function to calculate Fibonacci retracements
calculateFibRetracement(high, low, level) =>
    range = high - low
    switch level
        0.236 => high - (range * 0.236)
        0.382 => high - (range * 0.382)
        0.500 => high - (range * 0.500)
        0.618 => high - (range * 0.618)
        0.786 => high - (range * 0.786)
        => high - (range * 0.500)

// Function to detect chart patterns
detectDoubleTop(lookback, threshold) =>
    high1 = high[lookback]
    high2 = high
    
    math.abs(high1 - high2) <= threshold and high1 > high[lookback/2]

detectDoubleBottom(lookback, threshold) =>
    low1 = low[lookback]
    low2 = low
    
    math.abs(low1 - low2) <= threshold and low1 < low[lookback/2]

// === END OF CORE FOUNDATION ===