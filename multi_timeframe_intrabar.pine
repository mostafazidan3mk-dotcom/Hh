//@version=5
indicator("Multi-Timeframe Intrabar", overlay=true, max_lines_count=500, max_labels_count=500, max_bars_back = 5000)

// Inputs
var g_TF = "Timeframes"
use_tf1         = input.bool(true, "30 Minutes", inline = "TF1", group = g_TF)
tf1             = input.timeframe("30", "", inline = "TF1", group = g_TF)
tf1_color       = input.color(color.new(#FF1493, 70), "", inline = "TF1", group = g_TF)
use_tf1_mid     = input.bool(true, "50% Level", inline = "TF1M", group = g_TF)
tf1_mid_color   = input.color(color.new(#FF1493, 50), "", inline = "TF1M", group = g_TF)

use_tf2         = input.bool(true, "1 Hour", inline = "TF2", group = g_TF)
tf2             = input.timeframe("60", "", inline = "TF2", group = g_TF)
tf2_color       = input.color(color.new(#FF4500, 70), "", inline = "TF2", group = g_TF)
use_tf2_mid     = input.bool(true, "50% Level", inline = "TF2M", group = g_TF)
tf2_mid_color   = input.color(color.new(#FF4500, 50), "", inline = "TF2M", group = g_TF)

use_tf3         = input.bool(true, "2 Hours", inline = "TF3", group = g_TF)
tf3             = input.timeframe("120", "", inline = "TF3", group = g_TF)
tf3_color       = input.color(color.new(#32CD32, 70), "", inline = g_TF)
use_tf3_mid     = input.bool(true, "50% Level", inline = "TF3M", group = g_TF)
tf3_mid_color   = input.color(color.new(#32CD32, 50), "", inline = "TF3M", group = g_TF)

use_tf4         = input.bool(true, "4 Hours", inline = "TF4", group = g_TF)
tf4             = input.timeframe("240", "", inline = "TF4", group = g_TF)
tf4_color       = input.color(color.new(#1E90FF, 70), "", inline = "TF4", group = g_TF)
use_tf4_mid     = input.bool(true, "50% Level", inline = "TF4M", group = g_TF)
tf4_mid_color   = input.color(color.new(#1E90FF, 50), "", inline = "TF4M", group = g_TF)

use_tf5         = input.bool(true, "Daily", inline = "TF5", group = g_TF)
tf5             = input.timeframe("D", "", inline = "TF5", group = g_TF)
tf5_color       = input.color(color.new(#9932CC, 70), "", inline = "TF5", group = g_TF)
use_tf5_mid     = input.bool(true, "50% Level", inline = "TF5M", group = g_TF)
tf5_mid_color   = input.color(color.new(#9932CC, 50), "", inline = "TF5M", group = g_TF)

use_tf6         = input.bool(true, "Weekly", inline = "TF6", group = g_TF)
tf6             = input.timeframe("W", "", inline = "TF6", group = g_TF)
tf6_color       = input.color(color.new(#FFD700, 70), "", inline = "TF6", group = g_TF)
use_tf6_mid     = input.bool(true, "50% Level", inline = "TF6M", group = g_TF)
tf6_mid_color   = input.color(color.new(#FFD700, 50), "", inline = "TF6M", group = g_TF)

use_tf7         = input.bool(true, "Monthly", inline = "TF7", group = g_TF)
tf7             = input.timeframe("M", "", inline = "TF7", group = g_TF)
tf7_color       = input.color(color.new(#FF69B4, 70), "", inline = "TF7", group = g_TF)
use_tf7_mid     = input.bool(true, "50% Level", inline = "TF7M", group = g_TF)
tf7_mid_color   = input.color(color.new(#FF69B4, 50), "", inline = "TF7M", group = g_TF)

var g_ALERT = "Alert Options"
alert_on_m30   = input.bool(false, "Alert on M30 touch", group = g_ALERT)
alert_on_h1    = input.bool(false, "Alert on H1 touch", group = g_ALERT)
alert_on_h2    = input.bool(false, "Alert on H2 touch", group = g_ALERT)
alert_on_h4    = input.bool(false, "Alert on H4 touch", group = g_ALERT)
alert_on_daily = input.bool(false, "Alert on Daily touch", group = g_ALERT)
alert_on_weekly = input.bool(false, "Alert on Weekly touch", group = g_ALERT)
alert_on_monthly = input.bool(false, "Alert on Monthly touch", group = g_ALERT)

var g_OPT = "Options"
minbars         = input.int(1, "Minimum Bars", group = g_OPT)
maxbars         = input.int(250, "Maximum Bars", group = g_OPT)
hllinewidth     = input.int(2, "High/Low Line Width", group = g_OPT)
midlinewidth    = input.int(1, "Mid Line Width", group = g_OPT)

// New: Stronger signal options
var g_RULE = "Break/Close & Re-entry Filters"
use_strong_rule   = input.bool(false, "Use Break/Close or Re-entry Hold", group=g_RULE)
hold_bars         = input.int(2, "Hold Bars", minval=1, maxval=10, group=g_RULE)
require_retest    = input.bool(false, "Require Retest of Level", group=g_RULE)
retest_lookback   = input.int(5, "Retest Lookback Bars", minval=1, maxval=50, group=g_RULE)

var g_LABEL = "Label Options"
bullishLabelStyle = input.string("Label Up", "Bullish Label Style", options=[  "None", "Label Up", "Label Down", "Label Left", "Label Right", "Label Center",   "Triangle Up", "Triangle Down", "Triangle Left", "Triangle Right",   "Flag", "Circle", "Square", "Diamond", "Cross", "X-Cross", "Arrow Up", "Arrow Down" ], group=g_LABEL)
bearishLabelStyle = input.string("Label Down", "Bearish Label Style", options=[ "None", "Label Up", "Label Down", "Label Left", "Label Right", "Label Center", "Triangle Up", "Triangle Down", "Triangle Left", "Triangle Right", "Flag", "Circle", "Square", "Diamond",  "Cross", "X-Cross", "Arrow Up", "Arrow Down"  ], group=g_LABEL)
labelSize = input.string("Small", "Label Size", options=["Auto", "Tiny", "Small", "Normal", "Large", "Huge"], group=g_LABEL)

bullishBgColor = input.color(color.new(color.green, 50), "Bullish Background Color", group=g_LABEL)
bullishTextColor = input.color(color.green, "Bullish Text Color", group=g_LABEL)
bearishBgColor = input.color(color.new(color.red, 50), "Bearish Background Color", group=g_LABEL)
bearishTextColor = input.color(color.red, "Bearish Text Color", group=g_LABEL)

show_m30_labels = input.bool(true, "Show M30 Labels", group = g_LABEL)
show_h1_labels  = input.bool(true, "Show H1 Labels", group = g_LABEL)
show_h2_labels  = input.bool(true, "Show H2 Labels", group = g_LABEL)
show_h4_labels  = input.bool(true, "Show H4 Labels", group = g_LABEL)
show_daily_labels = input.bool(true, "Show Daily Labels", group = g_LABEL)
show_weekly_labels = input.bool(true, "Show Weekly Labels", group = g_LABEL)
show_monthly_labels = input.bool(true, "Show Monthly Labels", group = g_LABEL)
max_labels      = input.int(50, "Maximum number of labels to show", minval=1, maxval=500, group = g_LABEL)
show_eol_labels = input.bool(true, "Show End-of-Line Labels", group = g_LABEL)
eol_label_offset = input.int(5, "End-of-Line Label Offset", minval=1, maxval=50, group = g_LABEL)

var g_TOUCH = "Touch Options"
use_wick_touch = input.bool(true, "Use Wick Touch", group=g_TOUCH)
use_body_touch = input.bool(true, "Use Body Touch", group=g_TOUCH)

// ————— Logic per timeframe (inside-bar/consolidation engine) —————
process_tf(tf) =>
    var float rangeHigh = na
    var float rangeLow  = na
    var float rangeMid  = na
    var int   rangeStart = 0
    var bool  inConsolidation = true
    var bool  bullishTouch = false
    var bool  bearishTouch = false

    [tfOpen, tfHigh, tfLow, tfClose, tfTime] = request.security(syminfo.tickerid, tf, [open, high, low, close, time], barmerge.gaps_off, barmerge.lookahead_on)
    newBar = ta.change(tfTime) != 0

    tfChildUp   = math.max(tfOpen, tfClose)
    tfChildDown = math.min(tfOpen, tfClose)

    if newBar
        upControl   = tfChildUp > rangeHigh  and bar_index - rangeStart > minbars and bar_index - rangeStart <= maxbars
        downControl = tfChildDown < rangeLow and bar_index - rangeStart > minbars and bar_index - rangeStart <= maxbars
        if (upControl or downControl)
            inConsolidation := false

        if (inConsolidation and na(rangeHigh) == false and tfChildDown >= rangeLow and tfChildUp <= rangeHigh and bar_index > 1)
            rangeStart := rangeStart
        else
            rangeHigh := tfHigh
            rangeLow  := tfLow
            rangeStart := bar_index
            inConsolidation := true

        if not inConsolidation and (bar_index - rangeStart > maxbars or bar_index - rangeStart < minbars)
            inConsolidation := true

        rangeMid := (rangeHigh + rangeLow) / 2
        bullishTouch := false
        bearishTouch := false

    if inConsolidation
        // Base states
        closedAbove = close > rangeHigh
        closedBelow = close < rangeLow

        // Rejections back inside the IB
        bullishRejectWick = low < rangeLow  and close >= rangeLow and high <= rangeHigh
        bullishRejectBody = open < rangeLow and close >= rangeLow
        bearishRejectWick = high > rangeHigh and close <= rangeHigh and low >= rangeLow
        bearishRejectBody = open > rangeHigh and close <= rangeHigh

        // Default/simple logic
        basicBull = ((use_wick_touch and bullishRejectWick) or (use_body_touch and bullishRejectBody) or closedAbove) and not closedBelow
        basicBear = ((use_wick_touch and bearishRejectWick) or (use_body_touch and bearishRejectBody) or closedBelow) and not closedAbove

        if use_strong_rule
            // Holding logic (consecutive closes) for stronger confirmation
            holdAboveHighBars = ta.sum(close > rangeHigh ? 1 : 0, hold_bars) == hold_bars
            holdBelowLowBars  = ta.sum(close < rangeLow  ? 1 : 0, hold_bars) == hold_bars
            holdAboveLowBars  = ta.sum(close >= rangeLow ? 1 : 0, hold_bars) == hold_bars
            holdBelowHighBars = ta.sum(close <= rangeHigh? 1 : 0, hold_bars) == hold_bars

            // Break & close beyond the range with hold
            strongBreakBull = closedAbove and holdAboveHighBars
            strongBreakBear = closedBelow and holdBelowLowBars

            // Re-enter back inside with hold
            reenterBull = (use_wick_touch and (low < rangeLow and close >= rangeLow) and high <= rangeHigh) or (use_body_touch and (open < rangeLow and close >= rangeLow))
            reenterBear = (use_wick_touch and (high > rangeHigh and close <= rangeHigh) and low >= rangeLow) or (use_body_touch and (open > rangeHigh and close <= rangeHigh))

            strongReentryBull = reenterBull and holdAboveLowBars
            strongReentryBear = reenterBear and holdBelowHighBars

            // Optional retest of the relevant level within a lookback window
            retestBreakBull   = ta.lowest(low,  retest_lookback) <= rangeHigh
            retestBreakBear   = ta.highest(high, retest_lookback) >= rangeLow
            retestReentryBull = ta.lowest(low,  retest_lookback) <= rangeLow
            retestReentryBear = ta.highest(high, retest_lookback) >= rangeHigh

            strongBull = (strongBreakBull and (not require_retest or retestBreakBull)) or (strongReentryBull and (not require_retest or retestReentryBull))
            strongBear = (strongBreakBear and (not require_retest or retestBreakBear)) or (strongReentryBear and (not require_retest or retestReentryBear))

            bullishTouch := strongBull
            bearishTouch := strongBear
        else
            bullishTouch := basicBull
            bearishTouch := basicBear

    [rangeHigh, rangeLow, rangeMid, rangeStart, inConsolidation, newBar, bullishTouch, bearishTouch]

// Process data for each timeframe
[high1, low1, mid1, start1, inRange1, newBar1, bullishTouch1, bearishTouch1] = process_tf(tf1)
[high2, low2, mid2, start2, inRange2, newBar2, bullishTouch2, bearishTouch2] = process_tf(tf2)
[high3, low3, mid3, start3, inRange3, newBar3, bullishTouch3, bearishTouch3] = process_tf(tf3)
[high4, low4, mid4, start4, inRange4, newBar4, bullishTouch4, bearishTouch4] = process_tf(tf4)
[high5, low5, mid5, start5, inRange5, newBar5, bullishTouch5, bearishTouch5] = process_tf(tf5)
[high6, low6, mid6, start6, inRange6, newBar6, bullishTouch6, bearishTouch6] = process_tf(tf6)
[high7, low7, mid7, start7, inRange7, newBar7, bullishTouch7, bearishTouch7] = process_tf(tf7)

// Plot lines
plot_lines(tfColor, midColor, high, low, mid, start, inRange, newBar, useMid, bullishTouch, bearishTouch, tfName) =>
    var line highLine = na
    var line lowLine = na
    var line midLine = na
    var label highLabel = na
    var label lowLabel = na

    if newBar and inRange
        if not na(highLine)
            line.delete(highLine)
            line.delete(lowLine)
            line.delete(midLine)
        if not na(highLabel)
            label.delete(highLabel)
            label.delete(lowLabel)

        validStart = math.max(start, 0)
        highLine := line.new(validStart, high, bar_index, high, color=tfColor, width=hllinewidth)
        lowLine  := line.new(validStart, low,  bar_index, low,  color=tfColor, width=hllinewidth)
        if useMid
            midLine := line.new(validStart, mid, bar_index, mid, color=midColor, width=midlinewidth, style=line.style_dashed)

        if show_eol_labels
            highLabel := label.new(bar_index + eol_label_offset, high, text=tfName + " CRT High", color=color.new(tfColor, 70), textcolor=tfColor, style=label.style_none, size=size.small)
            lowLabel  := label.new(bar_index + eol_label_offset, low,  text=tfName + " CRT Low",  color=color.new(tfColor, 70), textcolor=tfColor, style=label.style_none, size=size.small)

    if not na(highLine) and inRange
        line.set_x2(highLine, bar_index)
        line.set_x2(lowLine,  bar_index)
        if useMid and not na(midLine)
            line.set_x2(midLine, bar_index)

        if show_eol_labels
            label.set_x(highLabel, bar_index + eol_label_offset)
            label.set_y(highLabel, high)
            label.set_x(lowLabel,  bar_index + eol_label_offset)
            label.set_y(lowLabel,  low)

    [bullishTouch, bearishTouch]

// Plot lines for each timeframe
if use_tf1
    [bullishTouch1, bearishTouch1] = plot_lines(tf1_color, tf1_mid_color, high1, low1, mid1, start1, inRange1, newBar1, use_tf1_mid, bullishTouch1, bearishTouch1, "M30")
if use_tf2
    [bullishTouch2, bearishTouch2] = plot_lines(tf2_color, tf2_mid_color, high2, low2, mid2, start2, inRange2, newBar2, use_tf2_mid, bullishTouch2, bearishTouch2, "H1")
if use_tf3
    [bullishTouch3, bearishTouch3] = plot_lines(tf3_color, tf3_mid_color, high3, low3, mid3, start3, inRange3, newBar3, use_tf3_mid, bullishTouch3, bearishTouch3, "H2")
if use_tf4
    [bullishTouch4, bearishTouch4] = plot_lines(tf4_color, tf4_mid_color, high4, low4, mid4, start4, inRange4, newBar4, use_tf4_mid, bullishTouch4, bearishTouch4, "H4")
if use_tf5
    [bullishTouch5, bearishTouch5] = plot_lines(tf5_color, tf5_mid_color, high5, low5, mid5, start5, inRange5, newBar5, use_tf5_mid, bullishTouch5, bearishTouch5, "D")
if use_tf6
    [bullishTouch6, bearishTouch6] = plot_lines(tf6_color, tf6_mid_color, high6, low6, mid6, start6, inRange6, newBar6, use_tf6_mid, bullishTouch6, bearishTouch6, "W")
if use_tf7
    [bullishTouch7, bearishTouch7] = plot_lines(tf7_color, tf7_mid_color, high7, low7, mid7, start7, inRange7, newBar7, use_tf7_mid, bullishTouch7, bearishTouch7, "M")

// Label helpers
getLabelStyle(styleString) =>
    switch styleString
        "None" => label.style_none
        "Label Up" => label.style_label_up
        "Label Down" => label.style_label_down
        "Label Left" => label.style_label_left
        "Label Right" => label.style_label_right
        "Label Center" => label.style_label_center
        "Triangle Up" => label.style_triangleup
        "Triangle Down" => label.style_triangledown
        "Triangle Left" => label.style_triangleleft
        "Triangle Right" => label.style_triangleright
        "Flag" => label.style_flag
        "Circle" => label.style_circle
        "Square" => label.style_square
        "Diamond" => label.style_diamond
        "Cross" => label.style_cross
        "X-Cross" => label.style_xcross
        "Arrow Up" => label.style_arrowup
        "Arrow Down" => label.style_arrowdown
        => label.style_label_up

getLabelSize(sizeString) =>
    switch sizeString
        "Auto" => size.auto
        "Tiny" => size.tiny
        "Small" => size.small
        "Normal" => size.normal
        "Large" => size.large
        "Huge" => size.huge
        => size.auto

var label[] labels = array.new_label()

manageLabelCount(labelText, y, bgColor, textColor, style, size) =>
    if array.size(labels) >= max_labels
        label.delete(array.shift(labels))
    newLabel = label.new(bar_index, y, labelText, color=bgColor, textcolor=textColor, style=style, size=size)
    array.push(labels, newLabel)

// Labels per timeframe
checkAndCreateLabel(show, bullishTouch, bearishTouch, tfText) =>
    if show and bullishTouch
        manageLabelCount("B-" + tfText, low, bullishBgColor, bullishTextColor, getLabelStyle(bullishLabelStyle), getLabelSize(labelSize))
    if show and bearishTouch
        manageLabelCount("S-" + tfText, high, bearishBgColor, bearishTextColor, getLabelStyle(bearishLabelStyle), getLabelSize(labelSize))

checkAndCreateLabel(show_m30_labels, bullishTouch1, bearishTouch1, "M30")
checkAndCreateLabel(show_h1_labels, bullishTouch2, bearishTouch2, "H1")
checkAndCreateLabel(show_h2_labels, bullishTouch3, bearishTouch3, "H2")
checkAndCreateLabel(show_h4_labels, bullishTouch4, bearishTouch4, "H4")
checkAndCreateLabel(show_daily_labels, bullishTouch5, bearishTouch5, "D")
checkAndCreateLabel(show_weekly_labels, bullishTouch6, bearishTouch6, "W")
checkAndCreateLabel(show_monthly_labels, bullishTouch7, bearishTouch7, "M")

// Real alert conditions (create alerts in UI and choose the line)
alertcondition(alert_on_m30 ? (bullishTouch1 or bearishTouch1) : false, "M30 touch detected", "M30 bullish/bearish touch")
alertcondition(alert_on_h1 ?  (bullishTouch2 or bearishTouch2)  : false, "H1 touch detected",  "H1 bullish/bearish touch")
alertcondition(alert_on_h2 ?  (bullishTouch3 or bearishTouch3)  : false, "H2 touch detected",  "H2 bullish/bearish touch")
alertcondition(alert_on_h4 ?  (bullishTouch4 or bearishTouch4)  : false, "H4 touch detected",  "H4 bullish/bearish touch")
alertcondition(alert_on_daily ? (bullishTouch5 or bearishTouch5): false, "Daily touch detected","Daily bullish/bearish touch")
alertcondition(alert_on_weekly ? (bullishTouch6 or bearishTouch6): false, "Weekly touch detected","Weekly bullish/bearish touch")
alertcondition(alert_on_monthly ? (bullishTouch7 or bearishTouch7): false, "Monthly touch detected","Monthly bullish/bearish touch")