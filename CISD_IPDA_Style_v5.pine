//@version=5
indicator("CISD IPDA Deviations", shorttitle="CISD IPDA Dev", overlay=true, max_bars_back=500, max_boxes_count=500, max_labels_count=500, max_lines_count=500)

// --- IPDA Deviation User Inputs ---
dvs        = input.text_area("0\n1\n-1\n-1.5\n-2\n-2.5\n-4", title="Insert the Deviations you want to plot, one per line:")
label_size = input.string("Small", title="Label Size", options = ['Auto', 'Tiny', 'Small', 'Normal', 'Large', 'Huge'], inline = "lbl")
lbl        = input.bool(false, title="Hide Labels?", inline="lbl")
remove     = input.bool(false, title="Remove Deviations Once Invalidated?", group="Standard Deviations", tooltip="Once the '1' anchor price line is traded above/below the Deviation will disappear.")

// --- Deviation parsing (from IPDA) ---
var deviations = array.new_float()
if bar_index == 0
    array.clear(deviations)
    string[] chrs = str.split(dvs, "")
    if chrs.size()>0
        var string num = ""
        for i=0 to chrs.size()-1
            c = chrs.get(i)
            if chrs.get(i)=="\n"
                array.unshift(deviations, str.tonumber(num))
                num := ""
            else
                num += c
        array.unshift(deviations, str.tonumber(num))

size(string _size) =>
    switch _size
        "Tiny"   => size.tiny
        "Small"  => size.small
        "Normal" => size.normal
        "Large"  => size.large
        "Huge"   => size.huge
        => size.small

noColor  = color.new(color.white, 100)

// --- CISD LOGIC (from your v6 script, adapted to v5) ---
bullishBreakColor = input.color(color.black, "Bull CISD", inline = "bup")
bearishBreakColor = input.color(color.black, "Bear CISD", inline = "bep")
bullStr = input.string("+CISD", " ", tooltip = "Text to be displayed next to the CISD level.", inline = "bup")
bearStr = input.string("-CISD", " ", tooltip = "Text to be displayed next to the CISD level.", inline = "bep")
bullishAlerts = input.bool(false, "Alert?", "When set up through Tradingview, the script will send an alert when price closes ABOVE the current '+CISD' level.", inline = "bup")
bearishAlerts = input.bool(false, "Alert?", "When set up through Tradingview, the script will send an alert when price closes ABOVE the current '-CISD' level.", inline = "bep")
lineWidth = input.int(1, "Line Width", minval=1, maxval=5)
lookAheadBars = input.int(5, "Line Extension Bars", minval=1, maxval = 5)
styleOption = input.string("Solid (─)", title="Line Style", options=["Solid (─)", "Dotted (┈)", "Dashed (╌)"])
keepLevels = input.bool(false, "Keep old CISD levels")
showTable = input(false, title="Enable stat table", group = "Table")
tablePosition = input.string(defval = "Top Right", title = "Table Position", options=["Top Right", "Bottom Right", "Middle Right", "Bottom Center", "Middle Left"], group = "Table")
lineStyle = styleOption == "Dotted (┈)" ? line.style_dotted : styleOption == "Dashed (╌)" ? line.style_dashed : line.style_solid

type MarketStructure
    float topPrice
    float bottomPrice
    bool isBullish

type cisd
    line level
    label txt
    bool completed

var line lastTopLine = na
var line lastBottomLine = na
var MarketStructure currentStructure = MarketStructure.new(0, 0, false)
var cisdLevelsBu = array.new<cisd>()
var cisdLevelsBe = array.new<cisd>()
var bool isBullishPullback = false
var bool isBearishPullback = false
var float potentialTopPrice = na
var float potentialBottomPrice = na
var int bullishBreakIndex = na
var int bearishBreakIndex = na
var float bullishChangeLevel = na
var float bearishChangeLevel = na
var bool currentState = false

gettablePos(pos) =>
    pos == "Top Right"      ? position.top_right
    : pos == "Bottom Right" ? position.bottom_right
    : pos == "Middle Right" ? position.middle_right
    : pos == "Bottom Center"? position.bottom_center
    :                         position.middle_left

bearishPullbackDetected = close[1] > open[1]
bullishPullbackDetected = close[1] < open[1]
if bearishPullbackDetected and not isBearishPullback
    isBearishPullback := true
    potentialTopPrice := open[1]
    bullishBreakIndex := bar_index[1]
if bullishPullbackDetected and not isBullishPullback
    isBullishPullback := true
    potentialBottomPrice := open[1]
    bearishBreakIndex := bar_index[1]
if isBullishPullback
    if open < potentialBottomPrice
        potentialBottomPrice := open
        bearishBreakIndex := bar_index
    if (close < open) and (open > potentialBottomPrice)
        potentialBottomPrice := open
        bearishBreakIndex := bar_index     
if isBearishPullback
    if open > potentialTopPrice
        potentialTopPrice := open
        bullishBreakIndex := bar_index
    if (close > open) and open < potentialTopPrice
        potentialTopPrice := open
        bullishBreakIndex := bar_index      
if low < currentStructure.bottomPrice
    currentStructure.bottomPrice := low
    currentStructure.isBullish := false
    if isBearishPullback and (bar_index-bullishBreakIndex != 0)
        currentStructure.topPrice := math.max(high[bar_index-bullishBreakIndex],high[bar_index-bullishBreakIndex+1])
        isBearishPullback := false
        bearishLine = line.new(bullishBreakIndex, potentialTopPrice, bar_index + lookAheadBars, potentialTopPrice, color=bearishBreakColor, width=lineWidth, style = lineStyle)
        bearishLabel = label.new(bar_index + lookAheadBars, potentialTopPrice, bullStr, color=color.new(color.white,100), textcolor=bearishBreakColor, style=label.style_label_left, size=size.small)
        b = cisd.new(bearishLine, bearishLabel, false)
        array.push(cisdLevelsBe, b)
        // --- Find highest close before next bullish candle ---
        float highestClose = na
        bool found = false
        for i = 0 to 50  // scan up to 50 bars ahead (adjust as needed)
            idx = bar_index - bullishBreakIndex + i
            if (bullishBreakIndex + i) <= bar_index
                c = close[i]
                o = open[i]
                if na(highestClose) or c > highestClose
                    highestClose := c
                if c > o and i > 0  // next bullish candle
                    found := true
                    break
        if found and not na(highestClose)
            plotCISDDeviations(bullishBreakIndex, potentialTopPrice, highestClose, false, deviations, color.red, "-")
    else if close[1] > open[1] and close < open
        currentStructure.topPrice := high[1]
        isBearishPullback := false
        bearishLine = line.new(bullishBreakIndex, potentialTopPrice, bar_index + lookAheadBars, potentialTopPrice, color=bearishBreakColor, width=lineWidth, style = lineStyle)
        bearishLabel = label.new(bar_index + lookAheadBars, potentialTopPrice, bullStr, color=color.new(color.white,100), textcolor=bearishBreakColor, style=label.style_label_left, size=size.small)
        b = cisd.new(bearishLine, bearishLabel, false)
        array.push(cisdLevelsBe, b)
if high > currentStructure.topPrice
    currentStructure.isBullish := true
    currentStructure.topPrice := high
    if isBullishPullback and (bar_index-bearishBreakIndex != 0)
        currentStructure.bottomPrice := math.min(low[bar_index-bearishBreakIndex],low[bar_index-bearishBreakIndex+1])
        isBullishPullback := false
        bullishLine = line.new(bearishBreakIndex, potentialBottomPrice, bar_index + lookAheadBars, potentialBottomPrice, color=bearishBreakColor, width=lineWidth, style = lineStyle)
        bullishLabel = label.new(bar_index + lookAheadBars, potentialBottomPrice, bearStr, color=color.new(color.white,100), textcolor=bearishBreakColor, style=label.style_label_left, size=size.small)
        bu = cisd.new(bullishLine, bullishLabel, false)
        array.push(cisdLevelsBu, bu)
        // --- Find lowest close before next bearish candle ---
        float lowestClose = na
        bool found = false
        for i = 0 to 50  // scan up to 50 bars ahead (adjust as needed)
            idx = bar_index - bearishBreakIndex + i
            if (bearishBreakIndex + i) <= bar_index
                c = close[i]
                o = open[i]
                if na(lowestClose) or c < lowestClose
                    lowestClose := c
                if c < o and i > 0  // next bearish candle
                    found := true
                    break
        if found and not na(lowestClose)
            plotCISDDeviations(bearishBreakIndex, potentialBottomPrice, lowestClose, true, deviations, color.green, "+")
    else if close[1] < open[1] and close > open
        currentStructure.bottomPrice := low[1]
        isBullishPullback := false
        bullishLine = line.new(bearishBreakIndex, potentialBottomPrice, bar_index + lookAheadBars, potentialBottomPrice, color=bearishBreakColor, width=lineWidth, style = lineStyle)
        bullishLabel = label.new(bar_index + lookAheadBars, potentialBottomPrice, bearStr, color=color.new(color.white,100), textcolor=bearishBreakColor, style=label.style_label_left, size=size.small)
        bu = cisd.new(bullishLine, bullishLabel, false)
        array.push(cisdLevelsBu, bu)
if array.size(cisdLevelsBu) > 1 and not keepLevels
    latest = array.shift(cisdLevelsBu)
    line.delete(latest.level)
    label.delete(latest.txt)
if array.size(cisdLevelsBe) > 1 and not keepLevels
    latest = array.shift(cisdLevelsBe)
    line.delete(latest.level)
    label.delete(latest.txt)
if array.size(cisdLevelsBu) >= 1
    latest = array.get(cisdLevelsBu,0)
    if not (close < line.get_y2(latest.level)) and not latest.completed
        line.set_x2(latest.level, bar_index+lookAheadBars)
        label.set_x(latest.txt, bar_index+lookAheadBars)
    if close < line.get_y2(latest.level) and not latest.completed
        latest.completed := true
        alert("Bearish CISD Formed")
        bearishLine = line.new(bullishBreakIndex, potentialTopPrice, bar_index + lookAheadBars, potentialTopPrice, color=bearishBreakColor, width=lineWidth, style = lineStyle)
        bearishLabel = label.new(bar_index + lookAheadBars, potentialTopPrice, bullStr, color=color.new(color.white,100), textcolor=bearishBreakColor, style=label.style_label_left, size=size.small)
        b = cisd.new(bearishLine, bearishLabel, false)
        array.push(cisdLevelsBe, b)
        currentState := false
if array.size(cisdLevelsBe) >= 1 and not keepLevels
    latest = array.get(cisdLevelsBe,0)
    if not (close > line.get_y2(latest.level)) and not latest.completed
        line.set_x2(latest.level, bar_index+lookAheadBars)
        label.set_x(latest.txt, bar_index+lookAheadBars)
    if close > line.get_y2(latest.level) and not latest.completed
        latest.completed := true
        alert("Bullish CISD Formed")
        bullishLine = line.new(bearishBreakIndex, potentialBottomPrice, bar_index + lookAheadBars, potentialBottomPrice, color=bearishBreakColor, width=lineWidth, style = lineStyle)
        bullishLabel = label.new(bar_index + lookAheadBars, potentialBottomPrice, bearStr, color=color.new(color.white,100), textcolor=bearishBreakColor, style=label.style_label_left, size=size.small)
        bu = cisd.new(bullishLine, bullishLabel, false)
        array.push(cisdLevelsBu, bu)
        currentState := true
if showTable and barstate.islast
    var tbl = table.new(gettablePos(tablePosition), 4, 4, bgcolor=chart.bg_color, border_color=chart.fg_color, frame_color = chart.fg_color, frame_width = 1, border_width = 1)
    table.cell(tbl, 0,0, syminfo.ticker+", "+timeframe.period+" neo|", text_size = size.tiny, text_color = chart.fg_color)
    table.cell(tbl, 0, 1, "Current State", text_color=chart.bg_color, text_size=size.small, bgcolor = chart.fg_color)
    table.cell(tbl, 0, 2, currentState ? "Bullish" : "Bearish",  text_color=chart.fg_color, text_size=size.small)

// --- IPDA Deviation Plotting Engine, but anchored to CISD ---
plotCISDDeviations(anchorBar, anchorOpen, anchorClose, isBull, deviations, devColor, labelPrefix) =>
    for i = 0 to array.size(deviations)-1
        dev = array.get(deviations, i)
        lvl = anchorOpen + ((anchorOpen - anchorClose) * dev)
        line.new(anchorBar, lvl, bar_index, lvl, color=devColor, width=1, style=line.style_solid)
        if not lbl
            label.new(bar_index, lvl, labelPrefix + str.tostring(dev), color=noColor, style=label.style_label_left, textcolor=color.gray, size=size(label_size))

// --- Remove deviations if invalidated (optional, like IPDA) ---
// (You can add this logic if you want deviations to disappear after being traded through)